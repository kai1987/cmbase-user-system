// Generated by CoffeeScript 1.8.0
(function() {
  var LocalStrategy, PublicClientStrategy, User, mongoose;

  mongoose = require('mongoose');

  LocalStrategy = require('passport-local').Strategy;

  PublicClientStrategy = require('passport-oauth2-public-client').Strategy;

  User = mongoose.model('User');

  module.exports = function(passport, config) {
    var localStrategyCallback, localStrategyConfig, publicClientStrategyCallback;
    passport.serializeUser(function(user, done) {
      return done(null, user.id);
    });
    passport.deserializeUser(function(id, done) {
      return User.findOne({
        _id: id
      }, function(err, user) {
        return done(err, user);
      });
    });
    localStrategyConfig = {
      usernameField: 'username',
      passwordField: 'password'
    };
    localStrategyCallback = function(username, password, done) {
      User.findOne({
        username: username
      }, function(err, user) {
        if (err) {
          return done(err);
        }
        if (!user) {
          return done(null, false, {
            message: 'Unknown user'
          });
        }
        if (!user.authenticate(password)) {
          return done(null, false, {
            message: 'Invalid password'
          });
        }
        return done(null, user);
      });
    };
    passport.use(new LocalStrategy(localStrategyConfig, localStrategyCallback));
    publicClientStrategyCallback = function(udid, done) {
      User.findOrCreateByUdid(udid, function(err, user) {
        if (err) {
          return done(err);
        }
        if (!user) {
          return done(null, false, {
            message: 'Unknown user'
          });
        }
        return done(null, user);
      });
    };
    return passport.use(new PublicClientStrategy(publicClientStrategyCallback));
  };

}).call(this);
