// Generated by CoffeeScript 1.8.0
(function() {
  var Device, User, mongoose;

  mongoose = require('mongoose');

  User = mongoose.model('User');

  Device = mongoose.model('Device');

  exports.signin = function(req, res) {};

  exports.authCallback = function(req, res, next) {
    res.redirect('/');
  };

  exports.login = function(req, res) {
    res.render('users/login', {
      title: 'Login',
      message: req.flash('error')
    });
  };

  exports.signup = function(req, res) {
    res.render('users/signup', {
      title: 'Sign up',
      user: new User()
    });
  };

  exports.logout = function(req, res) {
    req.logout();
    res.redirect('/login');
  };

  exports.session = function(req, res) {
    res.redirect('/');
  };

  exports.create = function(req, res, next) {
    var newUser;
    console.log("[users::create] req.speak_as:" + req.speak_as);
    newUser = new User(req.body);
    newUser.provider = 'local';
    newUser.save(function(err) {
      if (err != null) {
        if (req.speak_as === "json") {
          next(new EvalError(String(err)));
        } else {
          res.render('users/signup', {
            errors: err.errors,
            user: newUser
          });
        }
        return;
      }
      req.logIn(newUser, function(err) {
        if (err != null) {
          return next(err);
        }
        if (req.speak_as === "json") {
          return res.json({
            id: newUser.id,
            success: true
          });
        } else {
          return res.redirect('/');
        }
      });
    });
  };

  exports.changePassword = function(req, res, next) {
    var newPassword;
    if (req.user == null) {
      return next(new EvalError("missing user"));
    }
    newPassword = String(req.body.new_password || "").trim();
    if (!newPassword) {
      return next(new EvalError("无效的新密码，请重新选择密码"));
    }
    req.user.set('password', newPassword);
    req.user.save(function(err) {
      if (err != null) {
        return next(err);
      }
      res.json({
        id: req.user.id,
        success: true
      });
    });
  };

  exports.show = function(req, res) {
    User.findOne({
      _id: req.params['userId']
    }).exec(function(err, user) {
      if (err != null) {
        return next(err);
      }
      if (user == null) {
        return next(new Error('Failed to load User ' + id));
      }
      res.render('users/show', {
        title: user.username,
        user: user
      });
    });
  };

  exports.user = function(req, res, next, id) {
    User.findOne({
      _id: id
    }).exec(function(err, user) {
      if (err != null) {
        return next(err);
      }
      if (user == null) {
        return next(new Error('Failed to load User ' + id));
      }
      req.profile = user;
      next();
    });
  };

  exports.udidlogin = function(req, res, next) {
    var user;
    user = req.user;
    if (user == null) {
      res.json({
        success: false,
        errors: "Unknown error,why user is null"
      });
      return;
    }
    if (!user.anonymous) {
      res.json({
        success: false,
        errors: "unanonymous",
        username: user.username
      });
      return;
    }
    res.json({
      id: user.id,
      success: true
    });
  };

  exports.udidbind = function(req, res, next) {
    var password, user, username, _ref;
    _ref = req.body, username = _ref.username, password = _ref.password;
    user = req.user;
    if (user == null) {
      res.json({
        success: false,
        errors: "Unknown error,why user is null"
      });
      return;
    }
    if (!user.anonymous) {
      res.json({
        success: false,
        errors: "unanonymous",
        username: user.username
      });
      return;
    }
    user.username = username;
    user.password = password;
    user.anonymous = false;
    user.save(function(err) {
      if (err != null) {
        res.json({
          success: false,
          errors: err
        });
        return;
      }
      return res.json({
        success: true
      });
    });
  };

  exports.passwordLogin = function(req, res, next) {
    var client_id, user;
    client_id = req.body.client_id;
    user = req.user;
    if (user.anonymous) {
      res.json({
        success: false,
        errors: 'this is anonymous user'
      });
      return;
    }
    res.json({
      id: req.user.id,
      success: true
    });
    if (client_id != null) {
      Device.findOne({
        udid: client_id
      }, function(err, device) {
        if (err) {
          return;
        }
        if (device && device.user_id === user.id) {
          return;
        }
        if (device != null) {
          device.user_id = user.id;
          device.save();
          return;
        }
        device = new Device({
          udid: client_id,
          user_id: user.id
        });
        return device.save();
      });
    }
  };

}).call(this);
