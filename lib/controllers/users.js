// Generated by CoffeeScript 1.8.0
(function() {
  var User, mongoose;

  mongoose = require('mongoose');

  User = mongoose.model('User');

  exports.signin = function(req, res) {};

  exports.authCallback = function(req, res, next) {
    res.redirect('/');
  };

  exports.login = function(req, res) {
    res.render('users/login', {
      title: 'Login',
      message: req.flash('error')
    });
  };

  exports.signup = function(req, res) {
    res.render('users/signup', {
      title: 'Sign up',
      user: new User()
    });
  };

  exports.logout = function(req, res) {
    req.logout();
    res.redirect('/login');
  };

  exports.session = function(req, res) {
    res.redirect('/');
  };

  exports.create = function(req, res, next) {
    var newUser;
    console.log("[users::create] req.speak_as:" + req.speak_as);
    newUser = new User(req.body);
    newUser.provider = 'local';
    User.findOne({
      username: newUser.username
    }).exec(function(err, user) {
      if (err != null) {
        return next(err);
      }
      if (user == null) {
        newUser.save(function(err) {
          if (err != null) {
            if (req.speak_as === "json") {
              next(new EvalError(String(err)));
            } else {
              res.render('users/signup', {
                errors: err.errors,
                user: newUser
              });
            }
            return;
          }
          req.logIn(newUser, function(err) {
            if (err != null) {
              return next(err);
            }
            if (req.speak_as === "json") {
              return res.json({
                id: newUser.id,
                success: true
              });
            } else {
              return res.redirect('/');
            }
          });
        });
      } else {
        if (req.speak_as === "json") {
          next(new EvalError("用户名已存在"));
        } else {
          res.render('users/signup', {
            errors: [
              {
                "type": "username already registered"
              }
            ],
            user: newUser
          });
        }
        return;
      }
    });
  };

  exports.changePassword = function(req, res, next) {
    var newPassword;
    if (req.user == null) {
      return next(new EvalError("missing user"));
    }
    newPassword = String(req.body.new_password || "").trim();
    if (!newPassword) {
      return next(new EvalError("无效的新密码，请重新选择密码"));
    }
    req.user.set('password', newPassword);
    req.user.save(function(err) {
      if (err != null) {
        return next(err);
      }
      res.json({
        id: req.user.id,
        success: true
      });
    });
  };

  exports.show = function(req, res) {
    User.findOne({
      _id: req.params['userId']
    }).exec(function(err, user) {
      if (err != null) {
        return next(err);
      }
      if (user == null) {
        return next(new Error('Failed to load User ' + id));
      }
      res.render('users/show', {
        title: user.username,
        user: user
      });
    });
  };

  exports.user = function(req, res, next, id) {
    User.findOne({
      _id: id
    }).exec(function(err, user) {
      if (err != null) {
        return next(err);
      }
      if (user == null) {
        return next(new Error('Failed to load User ' + id));
      }
      req.profile = user;
      next();
    });
  };

}).call(this);
