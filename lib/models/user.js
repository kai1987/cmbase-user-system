// Generated by CoffeeScript 1.8.0
(function() {
  var DeviceSchema, Schema, UserSchema, authTypes, crypto, mongoose, shortid, timestamps, validatePresenceOf, _;

  mongoose = require('mongoose');

  Schema = mongoose.Schema;

  timestamps = require("mongoose-times");

  crypto = require('crypto');

  _ = require('underscore');

  authTypes = ['github', 'twitter', 'facebook', 'google'];

  shortid = require('shortid');

  UserSchema = new Schema({
    username: {
      type: String
    },
    provider: String,
    hashed_password: String,
    salt: String,
    anonymous: {
      type: Boolean,
      "default": false
    }
  });

  UserSchema.virtual('password').set(function(password) {
    this._password = password;
    this.salt = this.makeSalt();
    return this.hashed_password = this.encryptPassword(password);
  }).get(function() {
    return this._password;
  });

  UserSchema.statics = {
    findOrCreateByUdid: function(udid, callback) {
      var Device, User;
      Device = mongoose.model('Device');
      User = mongoose.model('User');
      Device.findOne({
        udid: udid
      }, function(err, dvc) {
        var user, userObj;
        if (err) {
          return callback(err);
        }
        if (dvc != null) {
          return User.findById(dvc.user_id, function(err, user) {
            if (user != null) {
              user.device = dvc;
            }
            return callback(err, user);
          });
        } else {
          userObj = {
            username: "anonymous_" + (shortid.generate()),
            anonymous: true,
            password: shortid.generate(),
            provider: 'local'
          };
          user = new User(userObj);
          return user.save(function(err) {
            if (err != null) {
              console.error("[user:findOrCreateByUdid:save user error:" + err);
              callback(err);
              return;
            }
            dvc = new Device({
              udid: udid,
              user_id: user.id
            });
            return dvc.save(function(err) {
              if (err != null) {
                console.error("[user:findOrCreateByUdid:save device error:" + err);
                callback(err);
                return;
              }
              user.device = dvc;
              return callback(null, user);
            });
          });
        }
      });
    }
  };

  UserSchema.plugin(timestamps, {
    created: "created_at",
    lastUpdated: "updated_at"
  });

  DeviceSchema = new Schema({
    udid: {
      type: String,
      unique: true,
      validate: [
        {
          validator: (function(val) {
            return val.length >= 10;
          }),
          msg: "{PATH} is too short."
        }, {
          validator: (function(val) {
            return val.length <= 64;
          }),
          msg: "{PATH} is too long."
        }
      ]
    },
    user_id: {
      type: String,
      ref: 'User'
    }
  });

  DeviceSchema.plugin(timestamps, {
    created: "created_at",
    lastUpdated: "updated_at"
  });

  validatePresenceOf = function(value) {
    return value && value.length;
  };

  UserSchema.path('username').validate(function(username) {
    if (authTypes.indexOf(this.provider) !== -1) {
      return true;
    }
    return username.length;
  }, 'Username cannot be blank');

  UserSchema.path('hashed_password').validate(function(hashed_password) {
    if (authTypes.indexOf(this.provider) !== -1) {
      return true;
    }
    return hashed_password.length;
  }, 'Password cannot be blank');

  UserSchema.pre('save', function(next) {
    var User;
    console.log("[user::pre save] @isNew:" + this.isNew);
    if (!this.isNew) {
      return next();
    }
    if (!validatePresenceOf(this.password) && authTypes.indexOf(this.provider) === -1) {
      return next(new Error('Invalid password'));
    }
    User = mongoose.model('User');
    User.findOne({
      username: this.username
    }, function(err, user) {
      if (err) {
        return next(err);
      }
      if (user != null) {
        return next(new Error('用户名已存在'));
      }
    });
    return next();
  });

  UserSchema.methods = {
    authenticate: function(plainText) {
      return this.encryptPassword(plainText) === this.hashed_password;
    },
    makeSalt: function() {
      return Math.round(new Date().valueOf() * Math.random()) + '';
    },
    encryptPassword: function(password) {
      if (!password) {
        return '';
      }
      return crypto.createHmac('sha1', this.salt).update(password).digest('hex');
    }
  };

  mongoose.model('User', UserSchema);

  mongoose.model('Device', DeviceSchema);

}).call(this);
