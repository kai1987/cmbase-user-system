// Generated by CoffeeScript 1.6.3
(function() {
  var Schema, UserSchema, authTypes, crypto, mongoose, validatePresenceOf, _;

  mongoose = require('mongoose');

  Schema = mongoose.Schema;

  crypto = require('crypto');

  _ = require('underscore');

  authTypes = ['github', 'twitter', 'facebook', 'google'];

  UserSchema = new Schema({
    username: String,
    provider: String,
    hashed_password: String,
    salt: String
  });

  UserSchema.virtual('password').set(function(password) {
    console.log("[user::set password] password:" + password);
    this._password = password;
    this.salt = this.makeSalt();
    return this.hashed_password = this.encryptPassword(password);
  }).get(function() {
    return this._password;
  });

  validatePresenceOf = function(value) {
    return value && value.length;
  };

  UserSchema.path('username').validate(function(username) {
    if (authTypes.indexOf(this.provider) !== -1) {
      return true;
    }
    return username.length;
  }, 'Username cannot be blank');

  UserSchema.path('hashed_password').validate(function(hashed_password) {
    if (authTypes.indexOf(this.provider) !== -1) {
      return true;
    }
    return hashed_password.length;
  }, 'Password cannot be blank');

  UserSchema.pre('save', function(next) {
    console.log("[user::pre save] @isNew:" + this.isNew);
    if (!this.isNew) {
      return next();
    }
    if (!validatePresenceOf(this.password) && authTypes.indexOf(this.provider) === -1) {
      return next(new Error('Invalid password'));
    } else {
      return next();
    }
  });

  UserSchema.methods = {
    authenticate: function(plainText) {
      return this.encryptPassword(plainText) === this.hashed_password;
    },
    makeSalt: function() {
      return Math.round(new Date().valueOf() * Math.random()) + '';
    },
    encryptPassword: function(password) {
      if (!password) {
        return '';
      }
      return crypto.createHmac('sha1', this.salt).update(password).digest('hex');
    }
  };

  mongoose.model('User', UserSchema);

}).call(this);
